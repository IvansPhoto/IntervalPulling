@page "/fetchdata"
@using IntervalPulling.BlazorClient.Services
@using IntervalPulling.Entities
@inject IDataService DataService
@implements IDisposable

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>
<button @onclick="FetchWeatherForecasts">Fetch data</button>
<p>This component demonstrates fetching data from the server.</p>

@switch (_readiness)
{
    case DataServiceState.Ready:
        <p>
            <em>Ready to load data.</em>
        </p>
        break;
    case DataServiceState.Loading:
        <p>
            <em>Loading...</em>
        </p>
        break;
    case DataServiceState.Finished:
        <p>
            <em>Finished.</em>
        </p>
        break;
    case DataServiceState.Error:
        <p>
            <em>Error.</em>
        </p>
        break;
    default:
        throw new ArgumentOutOfRangeException();
}

@if(_forecasts is not null && _readiness is DataServiceState.Finished)
{
<table class="table">
    <thead>
    <tr>
        <th>Date</th>
        <th>Temp. (C)</th>
        <th>Temp. (F)</th>
        <th>Summary</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var forecast in _forecasts)
    {
        <tr>
            <td>@forecast.Date.ToShortDateString()</td>
            <td>@forecast.TemperatureC</td>
            <td>@forecast.TemperatureF</td>
            <td>@forecast.Summary</td>
        </tr>
    }
    </tbody>
</table>
}

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private DataServiceState _readiness = DataServiceState.Ready;
    private WeatherForecast[]? _forecasts;

    private async Task FetchWeatherForecasts()
    {
        _readiness = DataServiceState.Loading;
        _forecasts = await DataService.GetWeatherForecasts("Type", _cancellationTokenSource.Token);
        _readiness = _forecasts?.Length is 0 ? DataServiceState.Error : DataServiceState.Finished;
        StateHasChanged();
    }

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

    enum DataServiceState
    {
        Ready,
        Loading,
        Finished,
        Error
    }
}